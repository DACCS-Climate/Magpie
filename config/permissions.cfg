# Creates Magpie services/resource permissions with specified configuration values on application startup.
#
#   This configuration is parsed after 'providers.cfg' (if found) to allow referencing existing service definitions.
#   See documentation 'Configuration' for more detail about loading method, order and other relevant information.
#
#   - Default location is 'magpie/config/permissions.cfg'.
#   - Directory location can be overridden with 'MAGPIE_CONFIG_DIR' (using filename 'permissions.cfg')
#     or can be explicitly overridden with 'MAGPIE_PERMISSIONS_CONFIG_PATH' pointing to a valid file.
#   - If 'MAGPIE_PERMISSIONS_CONFIG_PATH' points to an existing directory, the application will attempt
#     to process all '.cfg' files found under it one-by-one as separate 'permissions' configurations.
#
# Parameters:
# -----------
#   service:              service name to receive the permission (directly on it if no 'resource' mentioned, must exist)
#   resource:  (optional) tree path of the service's resource (ex: /res1/sub-res2/sub-sub-res3)
#   type:      (optional) resource type employed in case of ambiguity between multiple choices (depends on service type)
#   user:                 user for which to apply the modification of permission (skip if omitted or None)
#   group:                group for which to apply the modification of permission (skip if omitted or None)
#   permission:           name or object of the permission to be applied (see 'magpie.permissions' for supported values)
#   action:               one of [create, remove] (default: create)
#
# User/Group:
# -----------
#   At least one of [user, group] must be provided for every permission entry specified to create/remove.
#   Both can also be specified simultaneously to create/remove the same permission for both cases.
#
#   Whenever a specified user/group doesn't exist in the database for permission creation, it gets created dynamically.
#   When this dynamic creation must occur, sections 'users' and 'groups' are looked for possible extended definitions to
#   obtain the complete set of parameters applicable for each creation.
#
#   Lookup of 'users' and 'groups' is done transversally over all loaded configuration files within the configured
#   directory. This means that 'users' could be defined in one file, and referenced in another. Note that conflicting
#   items will override each other according to alphabetical load order of those files.
#   When no match can be found in any if the respective sections, default parameters of those definitions are employed.
#
#   The 'users' and 'groups' sections must be at the top-level of configuration files (same level as 'permissions').
#   This is to allow reuse of the same named reference multiple times across many 'permissions' items without
#   needing to repeat the whole set of parameters for corresponding user/group each time.
#   Examples of such sections are presented in 'config.yml'.
#
# Permission:
# -----------
#   When provided as string name, it is better to provide the explicit format "[name]-[access]-[scope]" to ensure
#   correct interpretation, although implicit permission string is supported. Object definition is also possible:
#
#   permission:
#     name:               name of the permission as allowed for the service/resource (e.g.: read, write, etc.)
#     access:             access rule for the permission (e.g.: allow/deny)
#     scope:              scope of permission, for tree inheritance or explicitly for resource (e.g.: recursive/match)
#
#   Refer to following documentations about permission modifiers and representation methods:
#     - https://pavics-magpie.readthedocs.io/en/latest/permissions.html#permission-definition-and-modifiers
#     - https://pavics-magpie.readthedocs.io/en/latest/permissions.html#permissions-representation
#
# Default behaviour:
# ------------------
#   - create missing resources if supported by the service (and tree automatically resolvable), then apply permissions.
#   - create missing user/group dynamically if required (see above 'User/Group' section).
#   - if applicable service, user or group is missing, corresponding permissions are ignored and not updated.
#   - if resolved resource during 'create' action results into an ambiguity (eg: cannot infer which type to apply),
#     the operation is skipped and the corresponding permission is not applied (use 'type' field to specify it).
#   - unknown actions are ignored and corresponding permission are not updated.
#   - unspecified action defaults to 'create'.
#   - already satisfied permission configurations are left as is
#     (ie: already existing permission to create or non-existing permission to remove are considered applied)
#   - environment variables (formatted as `$name` or `${name}`) are expanded if they are matched in the environment.
#
permissions:
  # implicit permission name that will apply ONLY directly (match) on '/api' resource for the 'api' service
  # because 'anonymous' is used (special group), the permission is publicly accessible by anyone
  # (for further details: https://pavics-magpie.readthedocs.io/en/latest/permissions.html#public-access)
  - service: api
    resource: /api
    permission: read-match
    group: anonymous
    action: create

  # explicit permission name applied recursively (no-match) on all nested resources under '/api/v1' inclusively
  # (resource '/api/v1/something' would also be accessible for reading)
  - service: api
    resource: /api/v1
    permission: read-allow-recursive
    group: anonymous
    action: create

  # create an exception to the above permission, and using the object definition instead
  # all unauthenticated users (not logged in) will be denied access to the deeply nested resource, all others under it
  - service: api
    resource: /api/v1/something/else
    permission:
      name: read
      access: deny
      scope: recursive
    group: anonymous
    action: create

  # revert the above deny rule specifically for users member of group named 'private'
  # because all groups take precedence over 'anonymous' special group, logged users member of that group gain access
  # note:
  #   revert of the rule is NOT caused by the order of rules in the file, but by their effective resolution methodology
  #   refer to documentation for details and examples regarding this resolution:
  #   https://pavics-magpie.readthedocs.io/en/latest/permissions.html#permissions-resolution
  - service: api
    resource: /api/v1/something/else
    permission: read-allow-recursive
    group: private
    action: create

  # using another service (type: WPS) requires another set of permissions names
  # (permission modifiers of access/scope also apply here, but are implicit in this case)
  - service: flyingpigeon
    permission: getcapabilities
    group: administrators
