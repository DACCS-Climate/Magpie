# Creates Magpie services/resource permissions with specified configuration values on application startup.
#
#   This configuration is parsed after 'providers.cfg' (if found) to allow referencing existing service definitions.
#   See documentation 'Configuration' for more detail about loading method, order and other relevant information.
#
#   - Default location is 'magpie/config/permissions.cfg'.
#   - Directory location can be overridden with 'MAGPIE_CONFIG_DIR' (using filename 'permissions.cfg')
#     or can be explicitly overridden with 'MAGPIE_PERMISSIONS_CONFIG_PATH' pointing to a valid file.
#   - If 'MAGPIE_PERMISSIONS_CONFIG_PATH' points to an existing directory, the application will attempt
#     to process all '.cfg' files found under it one-by-one as separate 'permissions' configurations.
#
# Parameters:
# -----------
#   service:              service name to receive the permission (directly on it if no 'resource' mentioned, must exist)
#   resource:  (optional) tree path of the service's resource (ex: /res1/sub-res2/sub-sub-res3)
#   type:      (optional) resource type employed in case of ambiguity between multiple choices (depends on service type)
#   user:                 user for which to apply the modification of permission (skip if omitted or None)
#   group:                group for which to apply the modification of permission (skip if omitted or None)
#   permission:           name or object of the permission to be applied (see 'magpie.permissions' for supported values)
#   action:               one of [create, remove] (default: create)
#
# User/Group:
# -----------
#   At least one of [user, group] must be provided for every permission entry specified to create/remove.
#   Both can also be specified simultaneously to create/remove the same permission for both cases.
#
#   Whenever a specified user/group doesn't exist in the database for permission creation, it gets created dynamically.
#   When this dynamic creation must occur, sections 'users' and 'groups' are looked for possible extended definitions,
#   as presented in 'config.yml'. Otherwise, the corresponding defaults are employed when no match was found.
#
#   The 'users' and 'groups' sections must be at the top-level of the configuration (same as 'permissions').
#   This is to allow reuse of the same named reference multiple times across many permissions operations without
#   needing to repeat the whole user/group parameters each time.
#
# Permission:
# -----------
#   When provided as string name, it is better to provide the explicit format "[name]-[access]-[scope]" to ensure
#   correct interpretation, although implicit permission string is supported. Object definition is also possible:
#
#   permission:
#     name:               name of the permission as allowed for the service/resource (e.g.: read, write, etc.)
#     access:             access rule for the permission (e.g.: allow/deny)
#     scope:              scope of permission, for tree inheritance or explicitly for resource (e.g.: recursive/match)
#
# Default behaviour:
# ------------------
#   - create missing resources if supported by the service (and tree automatically resolvable), then apply permissions.
#   - create missing user/group dynamically if required (see above 'User/Group' section).
#   - if applicable service, user or group is missing, corresponding permissions are ignored and not updated.
#   - if resolved resource during 'create' action results into an ambiguity (eg: cannot infer which type to apply),
#     the operation is skipped and the corresponding permission is not applied (use 'type' field to specify it).
#   - unknown actions are ignored and corresponding permission are not updated.
#   - unspecified action defaults to 'create'.
#   - already satisfied permission configurations are left as is
#     (ie: already existing permission to create or non-existing permission to remove are considered applied)
#   - environment variables (formatted as `$name` or `${name}`) are expanded if they are matched in the environment.
#
permissions:
  - service: api
    resource: /api
    permission: read
    user: anonymous
    action: create

  - service: flyingpigeon
    permission: getcapabilities
    group: administrators
