Utilities
============

.. utilities_helpers:

Magpie CLI Helpers
---------------------

Multiple CLI helpers are provided. These consist mostly of setup operation scripts that are automatically executed
during `Magpie` startup. Additional common functions are also provided such as registering service providers from a
configuration file or creating basic user accounts. Please refer to their corresponding usage by calling them with
``--help`` argument for more details.

Available helpers:

- ``create_users``
- ``register_default_users``
- ``register_providers``
- ``run_database_migration``
- ``sync_resources``

Source code of these helpers can be found `here <https://github.com/Ouranosinc/Magpie/tree/master/magpie/helpers>`_.

.. utilities_connection:

Magpie Connection
---------------------

The repository `Ouranosinc/requests-magpie`_ offers basic Authentication connection to a running `Magpie` instance
similarly to how traditional ``HTTPBasicAuth`` works under the hood. Using this, you can easily plug-and-play `Magpie`
in order to use it with the standard ``requests`` library by passing ``auth=MagpieAuth(<...>)``.

.. _Ouranosinc/requests-magpie: https://github.com/Ouranosinc/requests-magpie

Magpie Adapter: Integration with Twitcher
----------------------------------------------

The class :py:class:`magpie.adapter.MagpieAdapter` (`source <source_magpie_adapter>`_) allows an easy integration with
the proxy service `Twitcher`_. This allows the user to setup a server (i.e.: using `docker-compose`_ or similar) that
can easily integrate a complete user authentication and authorization chain by having `Twitcher`_ ask `Magpie` for
the targeted service/resource access permissions via the adapter upon receiving an HTTP(S) request.

On each new version build of the `Magpie` docker image, a corresponding docker image is built as
``pavics/twitcher:magpie-<version>`` with pre-configured adapter within `Twitcher`_ so that both can be used together.

Furthermore, when the above docker image is used with the integrated adapter, a new HTTP ``POST`` request on route
``/verify`` is added to `Twitcher`_. This method allows to test if an authentication token cookie generated by `Magpie`
(from login via API or UI) is valid and correctly interpreted by the `Twitcher`_ instance. This can be quite useful to
confirm that both instances were adequately configured as both require to share the same ``magpie.secret`` configuration
(amongst many other settings) in order to lookup and authenticate users correctly from incoming HTTP requests.

.. _docker-compose: https://docs.docker.com/compose/
.. _source_magpie_adapter: https://github.com/Ouranosinc/Magpie/blob/master/magpie/adapter/__init__.py#L107
.. _Twitcher: https://github.com/bird-house/twitcher
